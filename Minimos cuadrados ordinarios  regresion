#Economia Python

"Econometria Regresion"

import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
import random
import statsmodels.formula.api as stm
from statsmodels.graphics.regressionplots import abline_plot

#Se construyen las variables
df= pd.DataFrame({
    'Col1':[1,2,3],
    'Col2':[4,5,6]})

#Se contruyen las varibales de X,Y que responden a un conjunto de datos denominado
#familia de datos.

familia = pd.DataFrame({'Y':[55,60,65,70,75,
65,70,74,80,85,88,
79,84,90,94,98,
80,93,95,103,108,113,115,
102,107,110,116,118,125,
110,115,120,130,135,140,
120,136,140,144,145,
135,137,140,152,157,160,162,
137,145,155,165,175,189,
150,152,175,178,180,185,191
],'X':[80,80,80,80,80,
100,100,100,100,100,100,
120,120,120,120,120,
140,140,140,140,140,140,140,
160,160,160,160,160,160,
180,180,180,180,180,180,
200,200,200,200,200,
220,220,220,220,220,220,220,
240,240,240,240,240,240,
260,260,260,260,260,260,260]})

familia.head()

familia.tail()

#se generan las variables que se van a usar para trabajar: 

ingresos = np.arange(80,261,20)
consumo = [65,77,89,101,113,125,137,149,161,173]

familia.columns

#se genera un grafico para estimar
plt.figure() #se llama al dispositivo grafico
plt.plot(ingresos, consumo)
plt.scatter (familia['X'],familia['Y'])
plt.show()

ns = familia.shape
type(ns)
indice = np.arange(0,ns[0])
indice  #se crea la variable indicadora de la muestra 

random.seed(8519) #se genera una variable aleatoria de 20 elementos
muestra = random.sample(list(indice),k=20) #cambio de array a la lista
muestra #se usa sample para poder obtener una muestra sin remplazo del tama√±o indicado.

#comando.loc sirve para seleccionar filas y columnas de un dataframe basandose en al etiqueta
#df.loc[ fila, columna ]
ingreso_muestra = familia.loc[muestra, "X"] 
consumo_muestra = familia.loc[muestra, "Y"]

#comando de los minimos cuadrados ordinarios stm.ols
df = pd.DataFrame(list(zip(consumo_muestra, ingreso_muestra)), columns = ['consumo_muestra', 'ingreso_muestra'])
# (~) indica que se modela la variable dependiente en funcion de la independiente.
#.ols( )  comando para modelar el modelo de minimos cuadrados ordinarios.
#.fit ejecuta el modelo de regresion usando los datos que se proporcionarion (data o df)
ajuste_1 = stm.ols('consumo_muestra ~ ingreso_muestra ', data=df).fit()

#con este comando .summary se imprimen los resultados del modelo, permite la evaluacion del mismo.
print(ajuste_1.summary())  #imprime los resultados del modelo llamado ajuste_1
 
###############################################################################
"para graficar la funcion dada"

plt.figure()  #comando de grafica
#se grafica de la funcion df / lado x ingreso_muestra / lado y consumo_muestra
plt.plot(df.ingreso_muestra, df.consumo_muestra, 'o') 
#se grafica el modelado de datos, eje x (ingreso_muestra) , eje y predicho por la regresion (ajuste_1.fittedvalues)
plt.plot(df.ingreso_muestra, ajuste_1.fittedvalues, '-', color = "red")
plt.xlabel("Ingreso Esperado")
plt.ylabel("Conusmo Esperado")






